import telebot

bot = telebot.TeleBot("–í–∞—à —Ç–æ–∫–µ–Ω —Ç–µ–ª–µ–≥—Ä–∞–º–º –±–æ—Ç–∞")
from telegram.ext import ApplicationBuilder, MessageHandler, filters, CallbackQueryHandler, CommandHandler
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from util import *
import random


def random_box():
    boxes = []
    k = random.randint(3, 5)
    for _ in range(k):
        a = (random.randint(0, 2), random.randint(0, 2))
        if a in boxes:
            k = a
            while k == a:
                k = (random.randint(0, 2), random.randint(0, 2))
            boxes.append(k)
        else:
            boxes.append(a)
    return boxes


stavka = ""
text = ""


async def send_text(update, context, message):
    await context.bot.send_message(chat_id=update.effective_chat.id, text=message)


async def show_main_menu(update: Update, context: ContextTypes.DEFAULT_TYPE, commands: dict):
    command_list = [BotCommand(key, value) for key, value in commands.items()]
    await context.bot.set_my_commands(command_list, scope=BotCommandScopeChat(chat_id=update.effective_chat.id))
    await context.bot.set_chat_menu_button(menu_button=MenuButtonCommands(), chat_id=update.effective_chat.id)


async def lobby(update, context):
    dialog.mode = 'lobby'
    start_text = ("–í–∞—Å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —É–≥–∞–¥–∞–π–∫–∞!" + "\n" +
                  "–í–∞—à–∞ –∑–∞–¥–∞—á–∞ - —É–≥–∞–¥–∞—Ç—å –≤ –∫–∞–∫–æ–π –∏–∑ –∫–æ—Ä–æ–±–æ–∫ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤—ã–±—Ä–∞–Ω–Ω—ã–π –≤–∞–º–∏ –ø—Ä–∏–∑)")
    button = [InlineKeyboardButton(text='–ù–∞—á–∞—Ç—å –∏–≥—Ä—É', callback_data='game_start')]
    await update.message.reply_text(start_text, reply_markup=InlineKeyboardMarkup([button]))

    await show_main_menu(update, context, {
        "start": "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"
    })


async def single(update, context):
    dialog.mode = "singleplayer"
    await send_text(update, context, "–ß—Ç–æ –±—É–¥–µ—Ç–µ —Å—Ç–∞–≤–∏—Ç—å?")


async def single_play(update, context):
    global stavka
    stavka = update.message.text.lower()
    select_prize = "–í—ã–±–µ—Ä–µ—Ç–µ –ø—Ä–∏–∑"
    buttons = [
        [InlineKeyboardButton(text='–ü–∏–≤–æ üç∫', callback_data='start_üç∫'),
         InlineKeyboardButton(text='–ú–∞–Ω–¥–∞—Ä–∏–Ω üçä', callback_data='start_üçä')],
    ]
    await update.message.reply_text(select_prize, reply_markup=InlineKeyboardMarkup(buttons))


async def start_single_play(update, context):
    global text
    text = update.callback_query.data.partition('_')[-1]
    message = ("–ò–≥—Ä–∞ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è!" + '\n' +
               f"–ù–∞–π–¥–∏—Ç–µ {text} –≤ –∫–æ—Ä–æ–±–∫–µ –∏ –ø–æ–ª—É—á–∏—Ç–µ {stavka}")

    boxes = [[InlineKeyboardButton(text='üì¶', callback_data="lose_")] * 3 for _ in range(3)]

    prizes = random_box()
    for i in prizes:
        a, b = i
        for j in range(3):
            for k in range(3):
                if a == j and b == k:
                    boxes[a][b] = InlineKeyboardButton(text='üì¶', callback_data=f"lose_{text}")
    markup = InlineKeyboardMarkup(boxes)
    await update.callback_query.message.reply_text(text=message, reply_markup=markup)


async def win_or_death(update, context):
    boxes = update.callback_query.message.reply_markup.inline_keyboard
    boxes_new = [[InlineKeyboardButton(text='üì¶', callback_data="lose_")] * 3 for _ in range(3)]
    for i in range(3):
        for j in range(3):
            callbacks = boxes[i][j].callback_data.partition('_')[-1]
            if callbacks == "":
                boxes_new[i][j] = InlineKeyboardButton(text="‚ùå", callback_data="0")
            else:
                boxes_new[i][j] = InlineKeyboardButton(text=text, callback_data="0")
    bot.delete_message(chat_id=update.callback_query.message.chat.id,
                       message_id=update.callback_query.message.message_id)
    await update.callback_query.message.reply_text(text=update.callback_query.message.text,
                                                   reply_markup=InlineKeyboardMarkup(boxes_new))
    result = update.callback_query.data.partition('_')[-1]
    if result != "":
        await send_text(update, context, f"–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –Ω–∞—à–ª–∏ {text}!")
        new_try_win = "–ù–µ —Ö–æ—Ç–∏—Ç–µ –µ—â—ë —Ä–∞–∑ –∏—Å–ø—ã—Ç–∞—Ç—å —Å–≤–æ—é —É–¥–∞—á—É?)"
        button1 = [[InlineKeyboardButton(text="–ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –µ—â—ë", callback_data="restart_")]]
        markup = InlineKeyboardMarkup(button1)
        await update.callback_query.message.reply_text(new_try_win, reply_markup=markup)
    else:
        new_try_lose = "–í—ã –Ω–µ —É–≥–∞–¥–∞–ª–∏( –ú–æ–∂–µ—Ç –ø–æ–ø—Ä–æ–±—É–µ—Ç–µ –µ—â–µ —Ä–∞–∑?"
        button2 = [[InlineKeyboardButton(text="–ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞", callback_data="restart_")]]
        markup = InlineKeyboardMarkup(button2)
        await update.callback_query.message.reply_text(new_try_lose, reply_markup=markup)


async def dialogs(update, context):
    if dialog.mode == "singleplayer":
        await single_play(update, context)


dialog = Dialog()
dialog.mode = None
app = ApplicationBuilder().token("–í–∞—à —Ç–æ–∫–µ–Ω —Ç–µ–ª–µ–≥—Ä–∞–º–º –±–æ—Ç–∞").build()
app.add_handler(CommandHandler("start", lobby))
app.add_handler(CallbackQueryHandler(single, pattern="game_*"))
app.add_handler(CallbackQueryHandler(start_single_play, pattern="^start_*"))
app.add_handler(CallbackQueryHandler(win_or_death, pattern="lose_*"))
app.add_handler(CallbackQueryHandler(single, pattern="restart_*"))
app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, dialogs))
app.run_polling()


class Dialog:
    pass
